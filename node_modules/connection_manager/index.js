var dgram = require('dgram');
var client_manager = require('./lib/client_manager');
var events = require('events');
var util = require('util');

var PROTOCOLS = {
  UDP: 1
};

function connection_manager(settings) {
  var self = this;

  events.EventEmitter.call(this);

  self.DEFAULT_LISTEN_ADDR = 'localhost';
  self.DEFAULT_LISTEN_PORT = 8001;
  self.DEFAULT_DEBUG = false;
  self.DEFAULT_PROTOCOL = PROTOCOLS.UDP;

  self.options = settings || {};

  self.protocols = self.options.protocols || self.DEFAULT_PROTOCOL;

  self.servers = {
    udp_server: null
  }

  self.set_options = function(options) {
    self.options = options;
  };

  // client setup
  self.clients = new client_manager({debug: self.options.debug || false,
    timeout: self.options.client_idle_timeout * 1000 || null
  });

  // set up event proxy
  self.clients.on('client_joined', function(player_id) {
    self.emit('player_joined', player_id);
  });

  self.clients.on('client_left', function(player_id) {
    self.emit('player_left', player_id);
  });

  self.clients.on('client_action', function(player_id, action) {
    self.emit('action', player_id, action);
  });

  self.start_udp_server = function() {
    console.log('Starting UDP server...');

    if (self.servers.udp_server) {
      console.log('Error: UDP server already running on '
        + self.servers.udp_server.address().address + ':'
        + self.servers.udp_server.address().port);
      return;
    }

    self.servers.udp_server = dgram.createSocket('udp4');

    self.servers.udp_server.on('message', function(msg, rinfo) {
      self.clients.handle_msg.apply(self, arguments);
    });

    self.servers.udp_server.on('close', function() {
      self.clients.remove_all();
      self.servers.udp_server = null;

      self.emit('stop');
    });

    self.servers.udp_server.on('listening', function() {
      console.log('Server listening on '
        + self.servers.udp_server.address().address + ':'
        + self.servers.udp_server.address().port);

      console.log('UDP server started.');

      self.emit('start');
    });

    self.servers.udp_server.bind(
      self.options.listen_port || self.DEFAULT_LISTEN_PORT,
      self.options.listen_addr || self.DEFAULT_LISTEN_ADDR
    );
  };

  self.stop_udp_server = function() {
    if (!self.servers.udp_server) {
      // not running!
      return null;
    }

    return self.servers.udp_server.close();
  };

  self.start = self.start_udp_server;

  self.stop = self.stop_udp_server;

}

util.inherits(connection_manager, events.EventEmitter);

exports = module.exports = connection_manager;

exports.PROTOCOLS = PROTOCOLS;

// var mgr = require('./game_mgr');

// mgr.start();

// mgr.on('player_join', function(player_id) {});
// mgr.on('player_left', function(player_id) {})
// mgr.on('action', function(player_id, action) {});
